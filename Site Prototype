import React, { useEffect, useState } from 'react';

// UCDTogether — single-file React component
// This version removes external calendar library dependencies (no moment / react-big-calendar)
// to avoid build errors. It uses plain Date objects and a simple week view + event list.

const UCD_LOGO = '/mnt/data/644845af-279b-4c67-b936-edf287ed60cc.png';

// Colour palette sampled from the UCD crest image
const COLORS = {
  navy: '#012169',      // deep blue
  brightBlue: '#0072CE',
  ucdGreen: '#1E8F4A',  // university green tone
  gold: '#D8B24A',
  lightBg: '#F7FAFC',
};

const dayNames = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];

// STEM weekly timetable (recurring slots) — simple sample
const sampleTimetable = [
  { id: 't1', title: 'Calculus Lecture', day: 1, start: '09:00', end: '10:30', location: 'Sutherland' },
  { id: 't2', title: 'Physics Lecture', day: 1, start: '11:00', end: '12:00', location: 'Physics Bldg' },
  { id: 't3', title: 'Chemistry Lab', day: 2, start: '14:00', end: '17:00', location: 'Chem Lab' },
  { id: 't4', title: 'Programming Lecture', day: 3, start: '10:00', end: '11:30', location: 'Computer Sci' },
  { id: 't5', title: 'Electronics Lab', day: 4, start: '13:00', end: '16:00', location: 'Eng Lab' },
  { id: 't6', title: 'Statistics Lecture', day: 5, start: '09:30', end: '11:00', location: 'Maths' },
];

function getWeekStart(date){
  const d = new Date(date);
  const day = d.getDay();
  const diff = (day + 6) % 7; // make Monday = 0
  d.setDate(d.getDate() - diff);
  d.setHours(0,0,0,0);
  return d;
}

function mkDate(weekStart, dayIndex, timeStr){
  const [hh,mm] = timeStr.split(':').map(Number);
  const d = new Date(weekStart);
  d.setDate(d.getDate() + dayIndex);
  d.setHours(hh, mm, 0, 0);
  return d;
}

function overlaps(aStart, aEnd, bStart, bEnd){
  return !(aEnd <= bStart || bEnd <= aStart);
}

// Generate a deterministic-ish sample week of events for 6 societies
function generateSampleEvents(){
  const societies = [
    { id: 's1', name: 'Robotics Society' },
    { id: 's2', name: 'Maths Society' },
    { id: 's3', name: 'AI & Data' },
    { id: 's4', name: 'Entrepreneurship' },
    { id: 's5', name: 'Drama Society' },
    { id: 's6', name: 'Environmental' },
  ];

  const now = new Date();
  const weekStart = getWeekStart(now);

  // each tuple: [socIndex, day, start, end, type, location, attendance, capacity, url]
  const raw = [
    [0, 1, '18:00','20:00','Workshop','Engineering Building', 12, 50, 'https://ucd.ie/robotics/event1'],
    [0, 3, '12:00','13:00','Coffee Morning','Science Cafe', 35, 40, 'https://ucd.ie/robotics/coffee'],
    [1, 2, '17:00','19:00','Quiz','Student Centre', 80, 100, 'https://ucd.ie/maths/quiz'],
    [1, 4, '15:00','16:00','Seminar','Maths Lecture Hall', 20, 30, 'https://ucd.ie/maths/talk'],
    [2, 1, '13:00','15:00','Hackathon','CompSci Lab', 60, 60, 'https://ucd.ie/ai/hack'],
    [2, 5, '10:00','11:00','Coffee Morning','Library Foyer', 8, 100, 'https://ucd.ie/ai/coffee'],
    [3, 0, '19:00','21:00','Networking','Business Hub', 45, 50, 'https://ucd.ie/entrepreneur/network'],
    [4, 6, '18:30','20:30','Play Rehearsal','Drama Studio', 25, 30, 'https://ucd.ie/drama/rehearsal'],
    [5, 2, '09:00','10:30','Beach Cleanup','Campus Green', 18, 25, 'https://ucd.ie/env/cleanup'],
    [5, 4, '14:00','15:30','Seminar','Green Room', 5, 40, 'https://ucd.ie/env/seminar'],
  ];

  const events = raw.map((r,i) => {
    const soc = societies[r[0]];
    const start = mkDate(weekStart, r[1], r[2]);
    const end = mkDate(weekStart, r[1], r[3]);
    return {
      id: 'e' + (i+1),
      title: `${soc.name} — ${r[4]}`,
      societyId: soc.id,
      societyName: soc.name,
      start: start.toISOString(),
      end: end.toISOString(),
      type: r[4],
      location: r[5],
      attendance: r[6],
      capacity: r[7],
      url: r[8],
    };
  });

  // Quick runtime assertions (simple test cases) to help detect generation problems early
  console.assert(events.length === 10, 'Expected 10 sample events (found ' + events.length + ')');
  events.forEach((e, idx) => {
    console.assert(e.id, 'Event missing id at index ' + idx);
    console.assert(e.start && e.end, 'Event missing start/end at index ' + idx);
  });

  return { events, societies };
}

export default function UCDTogether(){
  const initial = generateSampleEvents();
  const [data, setData] = useState(initial);
  const [timetable] = useState(sampleTimetable);

  // filters: societies set, types set, locations set, attendance min/max, fits timetable
  const [filters, setFilters] = useState({ societyIds: new Set(), types: new Set(), locations: new Set(), attendanceMin: 0, attendanceMax: 1000, fitsTimetable: null });

  const [attending, setAttending] = useState(() => {
    try{ const s = localStorage.getItem('ucdt_att'); return s ? JSON.parse(s) : {}; } catch { return {}; }
  });

  useEffect(()=>{ try{ localStorage.setItem('ucdt_att', JSON.stringify(attending)); }catch{} }, [attending]);

  // derive options
  const societyOptions = data.societies;
  const typeOptions = Array.from(new Set(data.events.map(e=>e.type)));
  const locationOptions = Array.from(new Set(data.events.map(e=>e.location)));

  function toggleSet(setName, value){
    setFilters(f => {
      const copy = {...f};
      const s = new Set(copy[setName]);
      if(s.has(value)) s.delete(value); else s.add(value);
      copy[setName] = s;
      return copy;
    });
  }

  function isEventVisible(e){
    if(filters.societyIds.size && !filters.societyIds.has(e.societyId)) return false;
    if(filters.types.size && !filters.types.has(e.type)) return false;
    if(filters.locations.size && !filters.locations.has(e.location)) return false;
    if(e.attendance < filters.attendanceMin || e.attendance > filters.attendanceMax) return false;
    if(filters.fitsTimetable !== null){
      const fits = fitsTimetable(e, timetable);
      if(filters.fitsTimetable && !fits) return false;
      if(!filters.fitsTimetable && fits) return false;
    }
    return true;
  }

  function fitsTimetable(event, timetableSlots){
    const eStart = new Date(event.start).getTime();
    const eEnd = new Date(event.end).getTime();
    for(const t of timetableSlots){
      const ws = getWeekStart(new Date());
      const tS = mkDate(ws, t.day, t.start).getTime();
      const tE = mkDate(ws, t.day, t.end).getTime();
      if(overlaps(eStart, eEnd, tS, tE)) return false; // overlaps a class -> DOES NOT fit
    }
    return true; // no overlaps -> fits timetable
  }

  function attendanceColor(e){
    const pct = e.capacity ? (e.attendance / e.capacity) : 0;
    if(pct >= 0.9) return COLORS.gold; // nearly full — accent to gold so it's noticeable on UCD palette
    if(pct >= 0.5) return '#FF9F1C'; // orange-like
    return COLORS.ucdGreen; // green
  }

  function toggleAttend(id){ setAttending(a=>{ const copy = {...a}; copy[id] = !copy[id]; return copy; }); }

  function shareEvent(e){
    if(navigator.share){
      navigator.share({ title: e.title, url: e.url }).catch(()=>{});
    } else if(navigator.clipboard){
      navigator.clipboard.writeText(e.url).then(()=> alert('Event link copied to clipboard'));
    } else {
      window.open(e.url, '_blank');
    }
  }

  function refreshData(){
    setData(generateSampleEvents());
  }

  const visibleEvents = data.events.filter(isEventVisible);

  return (
    <div style={{ minHeight: '100vh', background: COLORS.lightBg, fontFamily: 'Inter,system-ui,Segoe UI,Roboto' }}>
      <div style={{ maxWidth: 1100, margin: '24px auto', padding: 16 }}>

        <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
            <img src={UCD_LOGO} alt="UCD logo" style={{ height: 56, borderRadius: 6, boxShadow: '0 2px 6px rgba(0,0,0,0.12)' }} />
            <div>
              <h1 style={{ margin: 0, color: COLORS.navy }}>UCDTogether</h1>
              <div style={{ fontSize: 13, color: '#425066' }}>Timetable + societies in one view</div>
            </div>
          </div>

          <div>
            <button onClick={() => window.location.reload()} title="Refresh page" style={{ display: 'inline-flex', alignItems: 'center', gap: 8, background: 'white', border: '1px solid #e6eef8', padding: '6px 10px', borderRadius: 8, cursor: 'pointer' }}>
              <img src={UCD_LOGO} alt="refresh" style={{ height: 28 }} />
              <span style={{ color: COLORS.navy, fontWeight: 600 }}>Refresh</span>
            </button>
            <button onClick={refreshData} style={{ marginLeft: 12, padding: '8px 12px', borderRadius: 8, background: COLORS.brightBlue, color: 'white', border: 'none', cursor: 'pointer' }}>New sample data</button>
          </div>
        </header>

        <div style={{ display: 'grid', gridTemplateColumns: '280px 1fr', gap: 16 }}>

          <aside style={{ background: 'white', borderRadius: 8, padding: 12, boxShadow: '0 4px 12px rgba(2,6,23,0.06)' }}>
            <h3 style={{ marginTop: 0, color: COLORS.navy }}>Filters</h3>

            <div style={{ marginBottom: 12 }}>
              <div style={{ fontSize: 13, marginBottom: 6 }}>Societies</div>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>
                {societyOptions.map(s => (
                  <button key={s.id} onClick={() => toggleSet('societyIds', s.id)} style={{ padding: '6px 8px', borderRadius: 8, border: filters.societyIds.has(s.id) ? `1px solid ${COLORS.brightBlue}` : '1px solid #e6eef8', background: filters.societyIds.has(s.id) ? COLORS.brightBlue : 'white', color: filters.societyIds.has(s.id) ? 'white' : '#223344', cursor: 'pointer' }}>{s.name}</button>
                ))}
              </div>
            </div>

            <div style={{ marginBottom: 12 }}>
              <div style={{ fontSize: 13, marginBottom: 6 }}>Event types</div>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>
                {typeOptions.map(t => (
                  <button key={t} onClick={() => toggleSet('types', t)} style={{ padding: '6px 8px', borderRadius: 8, border: filters.types.has(t) ? `1px solid ${COLORS.brightBlue}` : '1px solid #e6eef8', background: filters.types.has(t) ? COLORS.brightBlue : 'white', color: filters.types.has(t) ? 'white' : '#223344' }}>{t}</button>
                ))}
              </div>
            </div>

            <div style={{ marginBottom: 12 }}>
              <div style={{ fontSize: 13, marginBottom: 6 }}>Locations</div>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>
                {locationOptions.map(l => (
                  <button key={l} onClick={() => toggleSet('locations', l)} style={{ padding: '6px 8px', borderRadius: 8, border: filters.locations.has(l) ? `1px solid ${COLORS.brightBlue}` : '1px solid #e6eef8', background: filters.locations.has(l) ? COLORS.brightBlue : 'white', color: filters.locations.has(l) ? 'white' : '#223344' }}>{l}</button>
                ))}
              </div>
            </div>

            <div style={{ marginBottom: 12 }}>
              <div style={{ fontSize: 13, marginBottom: 6 }}>Attendance</div>
              <div style={{ display: 'flex', gap: 8 }}>
                <input type="number" value={filters.attendanceMin} onChange={e=>setFilters(f=>({...f, attendanceMin: Number(e.target.value)}))} style={{ width: 80, padding: '6px 8px', borderRadius: 8, border: '1px solid #e6eef8' }} />
                <div style={{ alignSelf: 'center' }}>to</div>
                <input type="number" value={filters.attendanceMax} onChange={e=>setFilters(f=>({...f, attendanceMax: Number(e.target.value)}))} style={{ width: 80, padding: '6px 8px', borderRadius: 8, border: '1px solid #e6eef8' }} />
              </div>
            </div>

            <div>
              <div style={{ fontSize: 13, marginBottom: 6 }}>Fits timetable?</div>
              <div style={{ display: 'flex', gap: 8 }}>
                <button onClick={()=>setFilters(f=>({...f, fitsTimetable: true}))} style={{ padding: '6px 10px', borderRadius: 8, background: filters.fitsTimetable===true ? COLORS.brightBlue : 'white', color: filters.fitsTimetable===true ? 'white' : '#223344', border: '1px solid #e6eef8' }}>Yes</button>
                <button onClick={()=>setFilters(f=>({...f, fitsTimetable: false}))} style={{ padding: '6px 10px', borderRadius: 8, background: filters.fitsTimetable===false ? COLORS.brightBlue : 'white', color: filters.fitsTimetable===false ? 'white' : '#223344', border: '1px solid #e6eef8' }}>No</button>
                <button onClick={()=>setFilters(f=>({...f, fitsTimetable: null}))} style={{ padding: '6px 10px', borderRadius: 8, background: filters.fitsTimetable===null ? COLORS.brightBlue : 'white', color: filters.fitsTimetable===null ? 'white' : '#223344', border: '1px solid #e6eef8' }}>Either</button>
              </div>
            </div>

          </aside>

          <main>
            <section style={{ background: 'white', padding: 12, borderRadius: 8, boxShadow: '0 6px 18px rgba(2,6,23,0.06)', marginBottom: 12 }}>
              <h3 style={{ marginTop: 0, color: COLORS.navy }}>Week timetable (STEM student)</h3>
              <div style={{ display: 'flex', gap: 8, overflowX: 'auto' }}>
                {timetable.map(t => (
                  <div key={t.id} style={{ minWidth: 180, padding: 8, borderRadius: 6, background: '#fbfdff', border: '1px solid #eef6ff' }}>
                    <div style={{ fontWeight: 600 }}>{t.title}</div>
                    <div style={{ fontSize: 13, color: '#556677' }}>{dayNames[t.day]} {t.start} — {t.end}</div>
                    <div style={{ fontSize: 13, color: '#556677' }}>{t.location}</div>
                  </div>
                ))}
              </div>
            </section>

            <section style={{ background: 'white', padding: 12, borderRadius: 8, boxShadow: '0 6px 18px rgba(2,6,23,0.06)' }}>
              <h3 style={{ marginTop: 0, color: COLORS.navy }}>Events this week ({visibleEvents.length})</h3>

              <div style={{ display: 'grid', gap: 10 }}>
                {visibleEvents.length === 0 && <div style={{ color: '#556677' }}>No events match your filters.</div>}
                {visibleEvents.map(e => (
                  <div key={e.id} style={{ border: '1px solid #eef6ff', padding: 10, borderRadius: 8, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <div>
                      <div style={{ display: 'flex', gap: 10, alignItems: 'center' }}>
                        <div style={{ width: 12, height: 12, borderRadius: 6, background: attendanceColor(e) }} title={`${e.attendance}/${e.capacity}`} />
                        <div style={{ fontWeight: 600 }}>{e.title}</div>
                      </div>
                      <div style={{ color: '#556677', fontSize: 13, marginTop: 6 }}>{dayNames[new Date(e.start).getDay()]} {new Date(e.start).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})} — {new Date(e.end).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})} · {e.location}</div>
                      <div style={{ color: '#7b8794', fontSize: 12, marginTop: 6 }}>Type: {e.type} · Attendance: {e.attendance}/{e.capacity} · Society: {e.societyName}</div>
                    </div>
                    <div style={{ display: 'flex', flexDirection: 'column', gap: 8, alignItems: 'flex-end' }}>
                      <button onClick={()=>toggleAttend(e.id)} style={{ padding: '8px 12px', borderRadius: 8, border: 'none', background: attending[e.id] ? COLORS.navy : '#eef6ff', color: attending[e.id] ? 'white' : COLORS.navy, cursor: 'pointer' }}>{attending[e.id] ? 'Attending' : 'RSVP'}</button>
                      <div style={{ display: 'flex', gap: 8 }}>
                        <button onClick={()=>shareEvent(e)} style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #e6eef8', background: 'white', cursor: 'pointer' }}>Share</button>
                        <a href={e.url} target="_blank" rel="noreferrer" style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #e6eef8', display: 'inline-block', textDecoration: 'none', color: COLORS.ucdGreen }}>Open</a>
                      </div>
                    </div>
                  </div>
                ))}

              </div>

            </section>

            {/* Full week compact grid */}
            <section style={{ marginTop: 12, background: 'white', padding: 12, borderRadius: 8, boxShadow: '0 6px 18px rgba(2,6,23,0.06)' }}>
              <h3 style={{ marginTop: 0, color: COLORS.navy }}>Full week overview</h3>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: 8 }}>
                {Array.from({length:7}).map((_, i) => (
                  <div key={i} style={{ minHeight: 120, borderRadius: 6, padding: 8, background: '#fbfdff', border: '1px solid #eef6ff' }}>
                    <div style={{ fontWeight: 700 }}>{dayNames[i]}</div>
                    <div style={{ marginTop: 8, display: 'flex', flexDirection: 'column', gap: 6 }}>
                      {timetable.filter(t=>t.day===i).map(t=> (
                        <div key={t.id} style={{ fontSize: 12, background: '#ffffff', padding: 6, borderRadius: 6, border: '1px dashed #eef6ff' }}>{t.title} · {t.start}-{t.end}</div>
                      ))}

                      {data.events.filter(e=> new Date(e.start).getDay()===i).map(e=> (
                        <div key={e.id} style={{ fontSize: 12, padding: 6, borderRadius: 6, background: attendanceColor(e), color: 'white' }}>{e.title} · {new Date(e.start).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}</div>
                      ))}

                    </div>
                  </div>
                ))}
              </div>
            </section>

            {/* Legend moved to the bottom as requested */}
            <section style={{ marginTop: 12, padding: 12, borderRadius: 8, background: 'white', boxShadow: '0 6px 18px rgba(2,6,23,0.06)' }}>
              <h4 style={{ marginTop: 0, color: COLORS.navy }}>Legend</h4>
              <div style={{ display: 'flex', gap: 16 }}>
                <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}><div style={{ width: 12, height: 12, borderRadius: 6, background: COLORS.ucdGreen }} /> Low attendance</div>
                <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}><div style={{ width: 12, height: 12, borderRadius: 6, background: '#FF9F1C' }} /> Medium</div>
                <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}><div style={{ width: 12, height: 12, borderRadius: 6, background: COLORS.gold }} /> Nearly full</div>
              </div>
            </section>

          </main>

        </div>

        <footer style={{ marginTop: 18, textAlign: 'center', color: '#7b8794', fontSize: 13 }}>
          Sample data generated for 6 societies. Events coloured by attendance relative to capacity. Logo supplied by user.
        </footer>

      </div>
    </div>
  );
}
